In the above syntax first, we created a structure variable than with the help of the dot operator accessed its member to initialize them.

Example:

#include <stdio.h>
#include <string.h>
struct Student
{
 char name[50];
 int class;
 char section;
 int roll_number;
}; 

int main()
{
  // created variable student1 for structure Student 
  struct Student student1;
 
 // accessing student1 member and initialzing them
 strcpy(student1.name,"Kavya Doshi");
 student1.class = 1;
 student1.section = 'A';
 student1.roll_number = 2;
 
 // printing values 
 printf("Example of Structure using dot (.) operator\n\n");
 printf( "Student Name : %s\n", student1.name);
 printf( "Student Class : %d\n", student1.class);
 printf( "Student Section : %c\n", student1.section);
 printf("Student Roll_number : %d\n", student1.roll_number);
 return 0;
}


To initialize the data members by this method, the comma-separated values should be provided in the same order as the members declared in the structure. Also, this method is beneficial to use when we have to initialize all the data members.

Example:

#include <stdio.h>
#include <string.h>

struct Student
{
  char name[50];
  int class;
  char section;
  int roll_number;
}; 

int main()
{
   // created variable student1 for structure Student 
   struct Student student1 = {"Kavya Doshi" , 1, 'A', 2};
  
  // printing values 
  printf("Example of Structure using Curly braces ({}) operator\n\n");
  printf( "Student Name : %s\n", student1.name);
  printf( "Student Class : %d\n", student1.class);
  printf( "Student Section : %c\n", student1.section);
  printf("Student Roll_number : %d\n", student1.roll_number);
  return 0;
}




From syntax, we can see that we use curly braces, and in between them, with the help of dot operator, data members are accessed and initialized. There can be any number of structure members from a single structure that we can initialize, and all of them are separated using commas. But, the most important thing is that we can initialize members in any order. It is not compulsory to maintain the same order as the members are declared in the structure.



#include <stdio.h>

// creating a structure
struct Student
{
     char name[50];
     int class;
     char section;
};

int main ()
{
    // creating a structure variable and initialzing some of its members
    struct Student student1 = {.section = 'D', .class = 10};
    
    // printing values 
    printf("Example of structure using Designated initializers\n\n");
    printf("Student1 Class is: %d\n",student1.class);
    printf("Student1 Section is: %c",student1.section);
}





structure_variable.structure_member;

Example 1:

#include<stdio.h>
struct Point
{
int x, y;
};
int main()
{
struct Point p1 = {0, 1};
// Accessing members of point p1
p1.x = 40;
printf ("x = %d, y = %d", p1.x, p1.y);
return 0;
}





Example 2:

#include <stdio.h>
#include <string.h>
 
struct Books {
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
};
 
int main( ) {

   struct Books Book1;        /* Declare Book1 of type Book */
   struct Books Book2;        /* Declare Book2 of type Book */
 
   /* book 1 specification */
   strcpy( Book1.title, "C Programming");
   strcpy( Book1.author, "Balaguru Swami"); 
   strcpy( Book1.subject, "C Programming Tutorial");
   Book1.book_id = 12345678;

   /* book 2 specification */
   strcpy( Book2.title, "Telecom Billing");
   strcpy( Book2.author, "Zara Ali Khan");
   strcpy( Book2.subject, "Telecom Billing Tutorial");
   Book2.book_id = 78945689;
 
   /* print Book1 info */
   printf("Information of BOOK - 1\n\n");
   printf( "Book 1 title : %s\n", Book1.title);
   printf( "Book 1 author : %s\n", Book1.author);
   printf( "Book 1 subject : %s\n", Book1.subject);
   printf( "Book 1 book_id : %d\n\n", Book1.book_id);

   /* print Book2 info */
   printf("Information of BOOK - 2\n\n");
   printf( "Book 2 title : %s\n", Book2.title);
   printf( "Book 2 author : %s\n", Book2.author);
   printf( "Book 2 subject : %s\n", Book2.subject);
   printf( "Book 2 book_id : %d\n", Book2.book_id);

   return 0;
}



 Array of Structure
example 3  
#include <stdio.h>
// structure definition
struct Student
{
    // data members
    char name[10];
    int roll_number;
    int marks;
}; 
// declare an array of the structure Student.
struct Student stu[3];
int i, j; 
// function to read the values
// from the user and print them.

void print()
{
    // read input from the user.
    for (i = 0; i < 3; i++)
    {
        printf("\nEnter the record of Student %d", i + 1);
        printf("\nStudent name: ");
        scanf("%s", stu[i].name);
        printf("Enter Roll number: ");
        scanf("%d", &stu[i].roll_number);
        printf("Enter Marks: ");
        scanf("%d", &stu[i].marks);
    }
    // print the details of each student.
    printf("\n");
    printf("\nDisplaying record of Students\n");
    for (i = 0; i < 3; i++)
    {
        printf("\nStudent name is %s", stu[i].name);
        printf("\nRoll number is %d", stu[i].roll_number);
        printf("\nMarks is %d", stu[i].marks);
        printf("\n");
    }
}
int main()
{
    // function call
    print();
    return 0;
}





 Nested Structure
Example:

#include <stdio.h>

struct complex {
  int imag;
  float real;
};

struct number {
  struct complex comp;
  int integer;
} num1;

int main() {

  // initialize complex variables
  num1.comp.imag = 25;
  num1.comp.real = 8.2;

  // initialize number variable
  num1.integer = 7;
	
  // print struct variables
  printf("Imaginary Part: %d\n", num1.comp.imag);
  printf("Real Part: %.2f\n", num1.comp.real);
  printf("Integer: %d", num1.integer);

  return 0;
