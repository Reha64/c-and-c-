4. Standard Library Header Files In C
Code Example:
1
2
3
4
5
6
7
8
#include <stdio.h>
 
int main() {
int num0 = 1, num1 = 0;
printf(“ a+ b = %d\n", num0 + num1);
 
return 0;
}
myheader.h (Header file):
#ifndef MYHEADER_H
#define MYHEADER_H
// Function prototype for calculating the area of a rectangle
double calculateRectangleArea(double length, double width);
#endif // MYHEADER_H
myfunctions.c (Source file):
#include "myheader.h"
// Function definition for calculating the area of a rectangle
double calculateRectangleArea(double length, double width) {
return length * width;
}
main.c (Source file for using the header and function):
1
2
3
4
5
6
7
8
9
10
11
12
13
14
#include <stdio.h>
#include "myheader.h"
 
int main() {
double length = 5.0;
double width = 3.0;
// Call the function from the user-defined header file
double area = calculateRectangleArea(length, width);
 
printf("The area of the rectangle is: %lf\n", area);
 
return 0;
}
7.26 Examples Of Using Header Files In C
Using standard header files in C gives us access to a wide range of capabilities when included in the code/ program, thus making the job of a programmer easier. Let's take a look at examples showcasing the application of all the header files we discussed above. 
Code Example 1:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>
 
int main() {
// stdio.h
printf("Hello world!\n");
// stdlib.h
int* arr = (int*) malloc(5 * sizeof(int));
if (arr == NULL) {
printf("Memory allocation failed.\n");
return 1;}
 
// string.h
char s1[] = "Hello";
char s2[6];
strcpy(s2, s1);
printf("str2: %s\n", s2);
 
The code comments in the example above indicate the name of the header file being used for the respective operation/ purpose. 
Code Example 2:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
#include <ctype.h>
#include <stdbool.h>
#include <limits.h>
#include <float.h>
#include <assert.h>
#include <errno.h>
 
int main(){
 
// ctype.h
char c = 'Z';
if (isalpha(c)) {
    printf("%c is an alphabetic character.\n", c);
}
 
// stdbool.h
bool x = true;
if (x) {
    printf("x is true.\n");}
 
// limits.h and float.h t
Code Example:
1
2
3
4
5
6
7
8
9
10
11
12
#include<stdio.h>
#include<conio.h>
 
int main(){
 
printf("Welcome");
printf("\n Hi everyone");
clrscr();
printf(“It will be printed First!!");
 
return 0;
}
The primary C source program then appears to be something as follows:
Code Example:
1
2
3
4
5
6
7
8
#include<stdio.h>
int z;
 
#include "file.h"
 
void main (){
printf("Completed");
}
Code Example:
1
2
3
4
5
6
7
8
#include<stdio.h>
int q;
 
char * file (void);
 
void main (){
printf("Successfully");
}
#include <stdio.h>
#include"factorial.h"
 
int main(){
printf("Hello !\n");
int n=1;
printf("The factorial of %d is: %d!",n,fact(1))
 
return 0;
}
