1. How Memory Management in C works?
#include <stdio.h>
int main() { float x; printf("The size of float is %d bytes", sizeof(x)); return 0;}

#include <stdio.h>
int main() { float arr[10];
printf("The size of the float array with 10 element is %d", sizeof(arr)); return 0;}
2. Static Memory Allocation
Example 1:

#include<stdio.h>
main (){
   int a[5] = {10,20,30,40,50};
   int i;
   printf ("Elements of the array are:");
   for ( i=0; i<5; i++)
      printf ("\n%d", a[i]);

}
Example 2:

#include<stdio.h>
void main(){

   int array[5]={5,20,35,50,65};
   int i,sum=0,product=1;
   //Reading elements into the array 
   for(i=0;i<5;i++){

      sum = sum + array[i];
      product = product*array[i];
   }
   printf("...Example to calculate sum and product of all elements...\n");
   printf("\nSum of elements in the array is: %d\n",sum);
   printf("Product of elements in the array is: %d\n",product);
}
3. Dynamic Memory Allocation
3.1malloc()
Example:


#include <stdio.h>
#include <stdlib.h>
int main()
{
	// This pointer will hold the base address of the block created
	int* ptr;
	int n, i;
	// Get the number of elements for the array
	printf("...Example of malloc()...\n");
	printf("\nEnter number of elements: ");
	scanf("%d",&n);
	printf("Entered number of elements: %d\n", n);
	// Dynamically allocate memory using malloc()
	ptr = (int*)malloc(n * sizeof(int));
	// Check if the memory has been successfully allocated by malloc or not
	if (ptr == NULL) {
		printf("Memory not allocated.\n");
		exit(0);
	}
	else {
		// Memory has been successfully allocated
		printf("Memory successfully allocated using malloc.\n");
		// Get the elements of the array
		for (i = 0; i < n; ++i) {
			ptr[i] = i + 1;
		}
		// Print the elements of the array
		printf("The elements of the array are: ");
		for (i = 0; i < n; ++i) {
			printf("%d, ", ptr[i]);
		}
	}
	return 0;
} 
3.2 calloc()

Example:   Program to calculate the sum of an arithmetic sequence.

#include <stdio.h>
    int main() {
        int i, * ptr, sum = 0;
        ptr = calloc(10, sizeof(int));
        if (ptr == NULL) {
            printf("Error! memory not allocated.");
            exit(0);
        }
        printf("...The sequence sum of first 10 numbers using calloc()...\n");
        printf("\nCalculating the sequence sum of the first 10 numbers... \n");
        for (i = 0; i < 10; ++i) { * (ptr + i) = i;
            sum += * (ptr + i);
        }
        printf("Sum = %d", sum);
        free(ptr);
        return 0;
    }

3.3 calloc() vs. malloc(): Key Differences
3.4   free()
Example:

#include <stdio.h>
#include <stdlib.h>

int main()
{
    printf("...Example of free()...\n");
	// This pointer will hold the base address of the block created
	int *ptr, *ptr1;
	int n, i;

	// Get the number of elements for the array
	n = 5;
	printf("\nNumber of elements: %d\n", n);

	// Dynamically allocate memory using malloc()
	ptr = (int*)malloc(n * sizeof(int));

	// Dynamically allocate memory using calloc()
	ptr1 = (int*)calloc(n, sizeof(int));

	// Check if the memory has been successfully allocated by malloc or not
else {

		// Memory has been successfully allocated
		printf("\nMemory successfully allocated using malloc.\n");

		// Free the memory
		free(ptr);
		printf("\nMalloc Memory successfully freed.\n");

		// Memory has been successfully allocated
		printf("\nMemory successfully allocated using calloc.\n");

		// Free the memory
		free(ptr1);
		printf("\nCalloc Memory successfully freed.\n");
	}

	return 0;
}
3.5   realloc()

Example:

#include <stdio.h>
#include <stdlib.h>
int main()
{
	int index = 0, i = 0, n, *marks; // this marks pointer hold the base address of the block created
	int ans;
	marks = (int*)malloc(sizeof(int)); // dynamically allocate memory using malloc
	
	// check if the memory is successfully allocated by malloc or not?
	
	if (marks == NULL) {
		printf("Memory cannot be allocated");
	}
	else {
	    
		// memory has successfully allocated
printf("...Example of realloc()...\n");
	printf("\nMemory has been successfully allocated by using malloc...\n");
		printf("\nBase address of marks = %pc\n",marks); // print the base or beginning address of allocated memory
		do {
			printf("\nEnter Marks:\n");
			scanf("%d", &marks[index]); // Get the marks
			printf("\nWould you like to add more(1/0): ");
			scanf("%d", &ans);

			if (ans == 1) {
				index++;
				marks = (int*)realloc(marks,(index + 1)* sizeof(int)); // Dynamically reallocate memory by using realloc
				// check if the memory is successfully allocated by realloc or not?
				if (marks == NULL) {
					printf("\nMemory cannot be allocated");
				}
				else {
					printf("\nMemory has been successfully reallocated using realloc...\n");
					printf("\nBase address of marks are:%pc",marks); //print the base or beginning address of allocated memory
				}
			}
		} while (ans == 1);
		// print the marks of the students
		for (i = 0; i <= index; i++) {
			printf("Marks of students %d are: %d\n ", i,marks[i]);
		}
		free(marks);
	}
	return 0;
}
